3+4
x <- 5
5+4
install.packages("tinytex")
library("tinytex")
library(tinytex)
install_tinytex()
install.packages("knitr")
\subsection{}
# Chunk 2
library('aRtsy')
# Chunk 4
# help("aRtsy")
set.seed(1)
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 6
set.seed(1313)
canvas_collatz(colors = colorPalette("tuscany3"))
# Chunk 8
set.seed(1)
canvas_collatz(
colors = colorPalette("vrolik4"),
background = '#dbdbdb',
n = 72,
angle.odd = -0.05,
angle.even = 0.0145)
# Chunk 10
set.seed(1)
canvas_smoke(colors = colorPalette("blossom"),
shape = c("clouds"),
algorithm = c("average"))
# Chunk 11
num <- seq(from = 0, to = 10, by = 1)
# Chunk 12
result <- 2^(num+1) + 2^(num-1)
# Chunk 13
position <- which(result==40)
# Chunk 14
sol <- num[position]
library(knitr)
setwd("~/Documents/GitHub/lab-5-summarizing-and-graphing-data-in-r-yuliia-heleveria")
################################################################################
# LAB 5
# YULIIA HELEVERIA
# MATH 240LB - SPRING 2025
################################################################################
################################################################################
# Load packages
################################################################################
library("tidyverse")
library("xtable")
library("patchwork")
################################################################################
# Step 1 - create a function to determine if Allentown
# is within range for each band
################################################################################
#load the tibble for all tracks
essentia.data.allentown <- read_csv("data/essentia.data.allentown.csv")
essentia.data <- read_csv("data/essentia.data.csv") #load the tibble for Allentown
#attempt to get the general approach working for overall_loudness
essentia.statistics <- essentia.data |>
group_by(artist) |> #Part 1 - group data by artist
summarize(min = min(overall_loudness), #Part 2 - summarize the data by computing statistics
LF = quantile(overall_loudness, 0.25) - 1.51*IQR(overall_loudness),
UF = quantile(overall_loudness, 0.75) + 1.51*IQR(overall_loudness),
max = max(overall_loudness)) |>
#Part 3 - Create two new columns - out of range and unusual
mutate(out.of.range = if_else(essentia.data.allentown$overall_loudness < min |
essentia.data.allentown$overall_loudness > max,
T, F)) |>
mutate(unusual =  if_else(essentia.data.allentown$overall_loudness < LF |
essentia.data.allentown$overall_loudness > UF,
T, F)) |>
#Part 4 - create a column description
rowwise()|> #apply row by row
mutate(description = case_when(
out.of.range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"))|>
ungroup()
################################################################################
# Function for analyzing each feature of the dataset
################################################################################
#function takes in the feature to analyze
#and outputs a tibble that contains statistical analysis for that feature
#compared with three bands of interest
feature_analysis <- function(feature){
essentia.statistics <- essentia.data |> #take input from Essentia data
group_by(artist) |>
summarize(min = min(get(feature), na.rm = T), #summarize the data by computing statistics, remove NA
LF = quantile(get(feature), 0.25, na.rm = T) - 1.51*IQR(get(feature), na.rm = T),
UF = quantile(get(feature), 0.75, na.rm = T) + 1.51*IQR(get(feature), na.rm = T),
max = max(get(feature), na.rm = T)) |>
#Create two new columns - out of range and unusual
mutate(out.of.range = if_else(essentia.data.allentown[[feature]] < min |
essentia.data.allentown[[feature]] > max,
T, F)) |>
mutate(unusual =  if_else(essentia.data.allentown[[feature]] < LF |
essentia.data.allentown[[feature]] > UF,
T, F)) |>
#create a column description
rowwise()|> #apply row by row
mutate(description = case_when(
out.of.range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"))|>
ungroup()
}
#Test if the function works for overall_loudness first
stats.feature <- feature_analysis("overall_loudness")
################################################################################
# Step 2 - apply function to Essentia data to determine where Allentown differs
################################################################################
#create a tibble to store feature comparison for each of three bands
stats.analysis.allentown <- tibble(Feature = character(), All.Get.Out = character(),
Manchester.Orchestra = character(),
The.Front.Bottoms = character())
#Apply function to numerical features in essentia.data
for (i in 4:length(colnames(essentia.data))){
feature <- colnames(essentia.data)[i]
#disregard non-numerical columns
if(feature != "chords_scale" & feature != "chords_key" & feature != "key" & feature != "mode"){
feature.analysis.allentown <- feature_analysis(feature) #call function
#extract description of feature range for each band
new_row <- tibble(Feature = feature,
All.Get.Out = feature.analysis.allentown |> slice(1) |> pull("description"),
Manchester.Orchestra = feature.analysis.allentown |> slice(2) |> pull("description"),
The.Front.Bottoms = feature.analysis.allentown |> slice(3) |> pull("description"))
#append new row with a feature to the tibble
stats.analysis.allentown <- bind_rows(stats.analysis.allentown, new_row)
}
}
################################################################################
# Step 3 - Create a table that summarizes select features
################################################################################
#create new tibble for count of features within range, out of range, and
#outlying for each band
allentown.summary <- stats.analysis.allentown |>
select(-Feature) |> #disregard feature column
pivot_longer(cols = everything(), #pivot data longer to count occurances
names_to = "Artist",
values_to = "Category") |>
count(Artist, Category) |> #count occurrence of each category
pivot_wider(names_from = Artist, values_from = n) #switch data so artists are columns
#write a csv file to create a table from it in .Rbw
write_csv(allentown.summary, "allentown.summary.csv", col_names = T)
#creating a table
table.allentown <-xtable(allentown.summary, label = "allentown.tab",
caption = "Comparison of Allentown's audio features with the range of band's features")
align(table.allentown) <- "c|l|c|c|c|" #create vertical bars
print(table.allentown, include.rownames = F) #print the table
################################################################################
# Step 4 - Create a series of graphs to summarize impact
################################################################################
#create new tibble by pivoting data longer for graph creation
long.allentown.summary <- allentown.summary |>
pivot_longer(cols = -Category, #count values for each category for each band
names_to = "Band",
values_to = "Count")
#write into .csv to create a graph in .Rnw
write_csv(long.allentown.summary, "long.allentown.summary.csv", col_names = T)
#filter out of range variables
out.of.range.filter <- long.allentown.summary|>
filter(Category == 'Out of Range')
#out of range column plot
allentown.out.of.range.col.plot <- ggplot(out.of.range.filter)+
geom_col(aes(x = Band,
y = Count,
fill = Band))+
scale_fill_manual(values = c("All.Get.Out" = "royalblue1",
"Manchester.Orchestra" = "plum2",
"The.Front.Bottoms" = "purple"))+
ylab("Out of Range Count")+
guides(fill = "none")+
theme_bw()
#filter outlying variables
outlying.filter <- long.allentown.summary|>
filter(Category == 'Outlying')
#outlying column plot
allentown.outlying.col.plot <- ggplot(outlying.filter)+
geom_col(aes(x = Band,
y = Count,
fill = Band))+
scale_fill_manual(values = c("All.Get.Out" = "royalblue1",
"Manchester.Orchestra" = "plum2",
"The.Front.Bottoms" = "purple"))+
ylab("Outlying Count")+
guides(fill = "none")+
theme_bw()
#filter within range variables
within.range.filter <- long.allentown.summary|>
filter(Category == 'Within Range')
#within range column plot
allentown.within.range.col.plot <- ggplot(within.range.filter)+
geom_col(aes(x = Band,
y = Count,
fill = Band))+
scale_fill_manual(values = c("All.Get.Out" = "royalblue1",
"Manchester.Orchestra" = "plum2",
"The.Front.Bottoms" = "purple"))+
ylab("Within Range Count")+
guides(fill = "none")+
theme_bw()
# 3 plots combined using facet_wrap()
allentown.wrapped <- ggplot(long.allentown.summary)+
geom_col(aes(x = Band,
y = Count,
fill = Band))+
scale_fill_manual(values = c("All.Get.Out" = "royalblue1",
"Manchester.Orchestra" = "plum2",
"The.Front.Bottoms" = "purple"))+
ylab("Numer of features")+
guides(fill = "none")+
facet_wrap(~Category)+
theme_bw()
#combine graphs using patchwork library
combined.graphs <- allentown.out.of.range.col.plot + allentown.outlying.col.plot +allentown.within.range.col.plot
# 3 plots combined using facet_wrap()
allentown.wrapped <- ggplot(long.allentown.summary)+
geom_col(aes(x = Band,
y = Count,
fill = Band))+
scale_fill_manual(values = c("All.Get.Out" = "royalblue1",
"Manchester.Orchestra" = "plum2",
"The.Front.Bottoms" = "purple"))+
ylab("Numer of features")+
guides(fill = guide_legend(title = "Band"))+
facet_wrap(~Category)+
theme_bw()+
theme(axis.text.x = element_blank())+
theme(legend.position = "bottom")
